# --- Load Necessary Libraries ---
library(MASS); library(Matrix); library(pracma); library(osqp); library(dplyr)
library(knitr); library(ggplot2); library(mvtnorm); library(foreach)
library(doParallel); library(igraph); library(tidyr); library(digest); library(frechet)
library(RColorBrewer); library(patchwork)

# --- Source Your FrechesTest Code ---
`%||%` <- function(a, b) if (is.null(a)) b else a
# source("FrechetJumpTest_helpers.R")
# source("frechesTest.R")

# --- Simulation Parameters ---
set.seed(123)
N_SIMULATIONS_POWER_CURVE <- 20 # For testing; use 1000 for paper
ALPHA_LEVEL <- 0.05
CUTOFF_C <- 0.5
SAMPLE_SIZE_POWER_CURVE <- 20 # Use 200 for paper

PARAM_POINTS_ONE_SIDE <- 5
PARAM_SEQ_LENGTH_SYMMETRIC <- 2 * PARAM_POINTS_ONE_SIDE + 1
MAX_DENSITY_JUMP <- 2.0
DENSITY_JUMP_PARAM_VALUES <- seq(-MAX_DENSITY_JUMP, MAX_DENSITY_JUMP, length.out = PARAM_SEQ_LENGTH_SYMMETRIC)
MAX_LOG_COV_JUMP_FACTOR <- log(2.0)
LOG_COV_JUMP_FACTORS <- seq(-MAX_LOG_COV_JUMP_FACTOR, MAX_LOG_COV_JUMP_FACTOR, length.out = PARAM_SEQ_LENGTH_SYMMETRIC)
COVARIANCE_JUMP_PARAM_VALUES <- exp(LOG_COV_JUMP_FACTORS)
MAX_NETWORK_BETA_JUMP <- 0.3
NETWORK_JUMP_PARAM_VALUES <- seq(-MAX_NETWORK_BETA_JUMP, MAX_NETWORK_BETA_JUMP, length.out = PARAM_SEQ_LENGTH_SYMMETRIC)

config_density_dgp <- list(BASE_SD = 1.0, MU_SLOPE_DYNAMIC = 0.8, MU_BASE_STATIC = 0.5)
config_covariance_dgp <- list(
  DIM = 3, SAMPLES_PER_MATRIX = 300, BASE_DIAG_DYNAMIC = 1.5, DIAG_SLOPE_DYNAMIC = 0.6,
  BASE_OFFDIAG_DYNAMIC = 0.2, OFFDIAG_SLOPE_DYNAMIC = 0.3, BASE_DIAG_STATIC = 1.5, BASE_OFFDIAG_STATIC = 0.2
)
config_network_dgp <- list(
  N_NODES = 10, BETA_CONCENTRATION = 5, BETA_MEAN_BASE_DYNAMIC = 0.4,
  BETA_MEAN_SLOPE_DYNAMIC = 0.2, BETA_MEAN_BASE_STATIC = 0.4
)

# --- Helper Function: Data Generation (as provided by you) ---
generate_data_for_power_curve <- function(N_gen, X_vals_gen, metric_type_gen, dgp_type_gen,
                                          current_jump_param_gen, cutoff_c_gen,
                                          config_den, config_cov, config_net) {
  Y_obj_list <- vector("list", N_gen)
  if (metric_type_gen == "Density") {
    for (i in 1:N_gen) {
      x_i <- X_vals_gen[i]
      mu_no_jump <- if (dgp_type_gen == "dynamic") config_den$MU_SLOPE_DYNAMIC * (x_i - cutoff_c_gen) else config_den$MU_BASE_STATIC
      current_mu <- mu_no_jump
      if (x_i >= cutoff_c_gen) {
        current_mu <- mu_no_jump + current_jump_param_gen
      }
      Y_obj_list[[i]] <- rnorm(100, mean = current_mu, sd = config_den$BASE_SD)
    }
  } else if (metric_type_gen == "Covariance") {
    for (i in 1:N_gen) {
      x_i <- X_vals_gen[i]
      Sigma_base <- diag(config_cov$DIM)
      if (dgp_type_gen == "dynamic") {
        diag_val <- config_cov$BASE_DIAG_DYNAMIC + config_cov$DIAG_SLOPE_DYNAMIC * (x_i - cutoff_c_gen)
        offdiag_val <- config_cov$BASE_OFFDIAG_DYNAMIC + config_cov$OFFDIAG_SLOPE_DYNAMIC * (x_i - cutoff_c_gen)
        diag(Sigma_base) <- pmax(0.1, diag_val)
        if (config_cov$DIM >= 2) Sigma_base[1,2] <- Sigma_base[2,1] <- offdiag_val
        if (config_cov$DIM >= 3) Sigma_base[1,3] <- Sigma_base[3,1] <- offdiag_val * 0.5
        if (config_cov$DIM >= 3) Sigma_base[2,3] <- Sigma_base[3,2] <- offdiag_val * 0.25
      } else { # static
        diag(Sigma_base) <- config_cov$BASE_DIAG_STATIC
        if (config_cov$DIM >= 2) Sigma_base[1,2] <- Sigma_base[2,1] <- config_cov$BASE_OFFDIAG_STATIC
        if (config_cov$DIM >= 3) Sigma_base[1,3] <- Sigma_base[3,1] <- config_cov$BASE_OFFDIAG_STATIC * 0.5
        if (config_cov$DIM >= 3) Sigma_base[2,3] <- Sigma_base[3,2] <- config_cov$BASE_OFFDIAG_STATIC * 0.25
      }
      Sigma_no_jump_pd <- try(as.matrix(Matrix::nearPD(Sigma_base, ensureSymmetry = TRUE, base.matrix = TRUE)$mat), silent = TRUE)
      if(inherits(Sigma_no_jump_pd, "try-error")) Sigma_no_jump_pd <- diag(config_cov$DIM)
      current_Sigma <- Sigma_no_jump_pd
      if (x_i >= cutoff_c_gen) {
        jump_matrix <- diag(sqrt(current_jump_param_gen), nrow = config_cov$DIM)
        current_Sigma_jumped <- jump_matrix %*% Sigma_no_jump_pd %*% jump_matrix
        current_Sigma_jumped_pd <- try(as.matrix(Matrix::nearPD(current_Sigma_jumped, ensureSymmetry = TRUE, base.matrix=TRUE)$mat), silent=TRUE)
        if(!inherits(current_Sigma_jumped_pd, "try-error")) current_Sigma <- current_Sigma_jumped_pd
      }
      sample_data_cov <- MASS::mvrnorm(n = config_cov$SAMPLES_PER_MATRIX, mu = rep(0, config_cov$DIM), Sigma = current_Sigma)
      Y_obj_list[[i]] <- stats::cov(sample_data_cov)
    }
  } else if (metric_type_gen == "Network") {
    m_nodes <- config_net$N_NODES
    for (i in 1:N_gen) {
      x_i <- X_vals_gen[i]
      p_no_jump <- if (dgp_type_gen == "dynamic") config_net$BETA_MEAN_BASE_DYNAMIC + config_net$BETA_MEAN_SLOPE_DYNAMIC * (x_i - cutoff_c_gen) else config_net$BETA_MEAN_BASE_STATIC
      p_no_jump <- pmax(0.05, pmin(0.95, p_no_jump))
      current_target_p <- p_no_jump
      if (x_i >= cutoff_c_gen) {
        current_target_p <- p_no_jump + current_jump_param_gen
        current_target_p <- pmax(0.05, pmin(0.95, current_target_p))
      }
      beta_shape1 <- current_target_p * config_net$BETA_CONCENTRATION
      beta_shape2 <- (1 - current_target_p) * config_net$BETA_CONCENTRATION
      if(beta_shape1 <=0 || beta_shape2 <=0) {beta_shape1 <- 1; beta_shape2 <- 1;}
      L_matrix <- matrix(0, nrow = m_nodes, ncol = m_nodes)
      num_off_diag_upper <- m_nodes * (m_nodes - 1) / 2
      if (num_off_diag_upper > 0) {
        beta_samples <- rbeta(num_off_diag_upper, shape1 = beta_shape1, shape2 = beta_shape2)
        k_sample <- 1
        for (r_node in 1:(m_nodes - 1)) for (c_node in (r_node + 1):m_nodes) {
          wij <- beta_samples[k_sample]; L_matrix[r_node, c_node] <- -wij; L_matrix[c_node, r_node] <- -wij; k_sample <- k_sample + 1
        }
      }
      diag(L_matrix) <- -rowSums(L_matrix)
      Y_obj_list[[i]] <- L_matrix
    }
  } else { stop(paste("Unsupported metric_type_gen:", metric_type_gen)) }
  return(list(Y_obj = Y_obj_list, X_scalar = X_vals_gen))
}

# --- Function to run one iteration (as provided by you) ---
run_one_power_iteration <- function(N_iter, metric_type_iter, dgp_type_iter, current_jump_val_iter,
                                    cutoff_c_iter, alpha_level_iter,
                                    config_den_iter, config_cov_iter, config_net_iter,
                                    frechesTest_cv_K_folds, frechesTest_cv_n_bw_candidates,
                                    frechesTest_verbose) {
  X_vals_iter <- runif(N_iter, 0, 1)
  data_sim_iter <- generate_data_for_power_curve(N_iter, X_vals_iter, metric_type_iter, dgp_type_iter,
                                                 current_jump_val_iter, cutoff_c_iter,
                                                 config_den_iter, config_cov_iter, config_net_iter)
  Y_obj_sim_iter <- data_sim_iter$Y_obj
  X_scalar_sim_iter <- data_sim_iter$X_scalar
  
  frechet_opts_iter <- list()
  if (metric_type_iter == "Density") {
    qSup_sim_iter <- seq(0, 1, length.out = 50)
    frechet_opts_iter <- list(qSup = qSup_sim_iter,
                              den_opts_for_create_density = list(kernel = "gauss", nRegGrid = 50))
  } else if (metric_type_iter == "Covariance") {
    frechet_opts_iter <- list(metric = "frobenius")
  } else if (metric_type_iter == "Network") {
    frechet_opts_iter <- list(metric = "frobenius", W_laplacian_bound = 1.0)
  }
  
  res_my_test_iter <- tryCatch({
    frechesTest( Y_obj = Y_obj_sim_iter, X_scalar = X_scalar_sim_iter, c_val = cutoff_c_iter,
                 metric_space_type = tolower(metric_type_iter), h_frechet = "CV", frechet_optns = frechet_opts_iter,
                 cv_K_folds = frechesTest_cv_K_folds, cv_n_bw_candidates = frechesTest_cv_n_bw_candidates,
                 verbose = frechesTest_verbose )
  }, error = function(e) list(p_value = NA_real_, h_variance_used = NA_real_))
  
  pval_my_test_iter <- res_my_test_iter$p_value
  h_selected_iter <- res_my_test_iter$h_variance_used
  if (is.na(h_selected_iter) || h_selected_iter <= 1e-5) {
    sd_X_iter <- sd(X_scalar_sim_iter, na.rm = TRUE)
    h_selected_iter <- if (!is.na(sd_X_iter) && sd_X_iter > 1e-6) 0.1 * sd_X_iter * (N_iter^(-1/5)) else 0.05
    h_selected_iter <- max(1e-4, h_selected_iter)
  }
  
  pval_dm_test_iter <- NA_real_
  tryCatch({
    idx_left_dm <- which(X_scalar_sim_iter >= (cutoff_c_iter - h_selected_iter) & X_scalar_sim_iter < cutoff_c_iter)
    idx_right_dm <- which(X_scalar_sim_iter >= cutoff_c_iter & X_scalar_sim_iter < (cutoff_c_iter + h_selected_iter))
    if (length(idx_left_dm) >= 3 && length(idx_right_dm) >= 3) {
      Y_local_left_dm <- Y_obj_sim_iter[idx_left_dm]; Y_local_right_dm <- Y_obj_sim_iter[idx_right_dm]
      Y_dm_iter <- c(Y_local_left_dm, Y_local_right_dm)
      group_dm_iter <- c(rep(1, length(Y_local_left_dm)), rep(2, length(Y_local_right_dm)))
      dm_optns_iter_base <- list(boot = FALSE)
      res_dm_iter <- NULL
      if (metric_type_iter == "Density") {
        qSup_for_dm <- frechet_opts_iter$`%||%`(list(qSup=NULL))$qSup
        if(is.null(qSup_for_dm)) qSup_for_dm <- seq(0, 1, length.out = 50)
        den_opts_for_dm <- frechet_opts_iter$`%||%`(list(den_opts_for_create_density=NULL))$den_opts_for_create_density
        if(is.null(den_opts_for_dm)) den_opts_for_dm <- list(kernel = "gauss", nRegGrid = 50)
        final_dm_opts <- dm_optns_iter_base; final_dm_opts$qSup <- qSup_for_dm
        for(name_opt in names(den_opts_for_dm)) final_dm_opts[[name_opt]] <- den_opts_for_dm[[name_opt]]
        res_dm_iter <- frechet::DenANOVA(yin = Y_dm_iter, group = group_dm_iter, optns = final_dm_opts)
      } else if (metric_type_iter == "Covariance") {
        res_dm_iter <- frechet::NetANOVA(Ly = Y_dm_iter, group = group_dm_iter, optns = dm_optns_iter_base)
      } else if (metric_type_iter == "Network") {
        res_dm_iter <- frechet::NetANOVA(Ly = Y_dm_iter, group = group_dm_iter, optns = dm_optns_iter_base)
      }
      if (!is.null(res_dm_iter) && !is.null(res_dm_iter$pvalAsy)) pval_dm_test_iter <- res_dm_iter$pvalAsy
    }
  }, error = function(e) { pval_dm_test_iter <- NA_real_ })
  return(c(my_test_reject = as.integer(!is.na(pval_my_test_iter) && pval_my_test_iter < alpha_level_iter),
           dm_test_reject = as.integer(!is.na(pval_dm_test_iter) && pval_dm_test_iter < alpha_level_iter)))
}

# --- Setup Parallel Backend ---
num_cores <- parallel::detectCores() - 1
if (is.na(num_cores) || num_cores < 1) num_cores <- 1
cl <- makeCluster(num_cores)
registerDoParallel(cl)
clusterEvalQ(cl, {
  `%||%` <- function(a, b) if (is.null(a)) b else a
  # source("FrechetJumpTest_helpers.R") # If not loaded by master and exported
  # source("frechesTest.R")
})
cat(paste("Starting power curve simulations on", getDoParWorkers(), "workers.\n"))

# --- Iterate Over Scenarios ---
all_power_results_df <- data.frame()
dgp_types_to_run <- c("dynamic", "static")
metric_spaces_to_run_power <- c("Density", "Covariance", "Network")

frechesTest_helpers_to_export <- c(".get_quantiles_for_obs_jump_test", ".calculate_one_sided_locpoly_weights",
                                   ".estimate_weighted_frechet_mean", ".estimate_one_sided_frechet_quantities", ".set_bw_range_frechet_style",
                                   "._cv_for_frechet_jump_h", ".project_to_laplacian_space_osqp")
functions_to_export_main <- c("generate_data_for_power_curve", "run_one_power_iteration",
                              "frechesTest", frechesTest_helpers_to_export)
vars_to_export <- c("CUTOFF_C", "ALPHA_LEVEL", "SAMPLE_SIZE_POWER_CURVE",
                    "config_density_dgp", "config_covariance_dgp", "config_network_dgp",
                    "DENSITY_JUMP_PARAM_VALUES", "COVARIANCE_JUMP_PARAM_VALUES", "NETWORK_JUMP_PARAM_VALUES",
                    "LOG_COV_JUMP_FACTORS")

for (dgp_type_scenario_loop in dgp_types_to_run) {
  for (metric_scenario_loop in metric_spaces_to_run_power) {
    cat(paste("\n--- Generating Power Curve for DGP:", dgp_type_scenario_loop, ", Metric:", metric_scenario_loop, "---\n"))
    varying_param_values_current_loop <- NULL; param_name_x_axis_loop <- ""
    if (metric_scenario_loop == "Density") {
      varying_param_values_current_loop <- DENSITY_JUMP_PARAM_VALUES; param_name_x_axis_loop <- "Mean Jump (\u03B4)"
    } else if (metric_scenario_loop == "Covariance") {
      varying_param_values_current_loop <- COVARIANCE_JUMP_PARAM_VALUES; param_name_x_axis_loop <- "Variance Scale Factor (\u03B2)"
    } else if (metric_scenario_loop == "Network") {
      varying_param_values_current_loop <- NETWORK_JUMP_PARAM_VALUES; param_name_x_axis_loop <- "Mean Edge Prob. Jump (\u0394p)"
    }
    
    power_results_list_current_scenario <- foreach(
      k_param_idx = seq_along(varying_param_values_current_loop), .combine = 'rbind',
      .packages = c("stats", "MASS", "Matrix", "pracma", "osqp", "igraph", "frechet", "digest"),
      .export = c(functions_to_export_main, vars_to_export)
    ) %dopar% {
      current_jump_par_val_worker <- varying_param_values_current_loop[k_param_idx]
      cfg_den_worker <- config_density_dgp; cfg_cov_worker <- config_covariance_dgp; cfg_net_worker <- config_network_dgp
      rejections_for_param <- t(replicate(N_SIMULATIONS_POWER_CURVE, {
        run_one_power_iteration(
          N_iter = SAMPLE_SIZE_POWER_CURVE, metric_type_iter = metric_scenario_loop, dgp_type_iter = dgp_type_scenario_loop,
          current_jump_val_iter = current_jump_par_val_worker, cutoff_c_iter = CUTOFF_C, alpha_level_iter = ALPHA_LEVEL,
          config_den_iter = cfg_den_worker, config_cov_iter = cfg_cov_worker, config_net_iter = cfg_net_worker,
          frechesTest_cv_K_folds = 5, frechesTest_cv_n_bw_candidates = 10, frechesTest_verbose = FALSE
        )
      }))
      data.frame( param_value = current_jump_par_val_worker,
                  power_my_test = mean(rejections_for_param[, "my_test_reject"], na.rm = TRUE),
                  power_dm_test = mean(rejections_for_param[, "dm_test_reject"], na.rm = TRUE)
      )
    }
    power_results_df_current_scenario <- as.data.frame(power_results_list_current_scenario)
    power_results_df_current_scenario$dgp_type <- dgp_type_scenario_loop
    power_results_df_current_scenario$metric_space <- metric_scenario_loop
    power_results_df_current_scenario$param_name_x_axis <- param_name_x_axis_loop
    all_power_results_df <- rbind(all_power_results_df, power_results_df_current_scenario)
  }
}
stopCluster(cl)
cat("All power curve simulations complete.\n")


# --- Plotting Combined Power Curves with Shared Legend ---
if (requireNamespace("ggplot2", quietly = TRUE) &&
    requireNamespace("tidyr", quietly = TRUE) &&
    requireNamespace("patchwork", quietly = TRUE)) {
  
  cat("\n--- Generating Combined Power Curve Plot ---\n")
  plot_list_final <- list()
  subplot_idx_counter <- 0 # Renamed to avoid conflict with k_param_idx
  
  test_colors <- RColorBrewer::brewer.pal(n = 3, name = "Set1")[1:2]
  test_shapes <- c(16, 17)
  test_linetypes <- c("solid", "longdash")
  test_labels <- c("Fréchet Jump Test", "Fréchet ANOVA")
  names(test_colors) <- test_labels; names(test_shapes) <- test_labels; names(test_linetypes) <- test_labels
  
  for (metric_plot_loop in metric_spaces_to_run_power) { # Rows by Metric
    for (dgp_plot_loop in dgp_types_to_run) {         # Columns by DGP Type
      subplot_idx_counter <- subplot_idx_counter + 1
      current_plot_data_df_plot <- all_power_results_df %>%
        filter(metric_space == metric_plot_loop, dgp_type == dgp_plot_loop)
      
      if(nrow(current_plot_data_df_plot) == 0) {
        plot_list_final[[subplot_idx_counter]] <- patchwork::plot_spacer()
        next
      }
      
      current_x_axis_label_plot <- unique(current_plot_data_df_plot$param_name_x_axis)
      # Using longer titles as per your screenshot
      subplot_title_text_full <- paste0("(", LETTERS[subplot_idx_counter], ") ", tools::toTitleCase(metric_plot_loop),
                                        " (", tools::toTitleCase(dgp_plot_loop), " DGP)")
      
      power_results_long_plot <- tidyr::pivot_longer(current_plot_data_df_plot,
                                                     cols = c("power_my_test", "power_dm_test"),
                                                     names_to = "Test_raw", values_to = "Power")
      power_results_long_plot$Test <- factor(power_results_long_plot$Test_raw,
                                             levels = c("power_my_test", "power_dm_test"),
                                             labels = test_labels)
      
      p_current_subplot <- ggplot(power_results_long_plot, aes(x = param_value, y = Power, color = Test, linetype = Test, shape = Test)) +
        geom_line(linewidth = 0.9) + geom_point(size = 2.5, stroke=0.7) + # Added stroke to points
        geom_hline(yintercept = ALPHA_LEVEL, linetype = "dashed", color = "grey30", linewidth = 0.7) +
        labs(title = subplot_title_text_full, x = NULL, y = NULL) +
        scale_y_continuous(limits = c(-0.02, 1.02), breaks = seq(0, 1, 0.2), expand = c(0,0.015)) +
        scale_color_manual(values = test_colors, name = "Test Method") +
        scale_shape_manual(values = test_shapes, name = "Test Method") +
        scale_linetype_manual(values = test_linetypes, name = "Test Method") +
        theme_classic(base_size = 11.5) + # Adjusted base_size for potentially long titles
        theme(legend.position = "none",
              plot.title = element_text(hjust = 0.5, size=rel(0.90), face="plain"), # Centered title
              plot.margin = unit(c(0.2, 0.2, 0.15, 0.2), "cm"), # t,r,b,l margins
              axis.title.x = element_text(size = rel(0.95), margin = margin(t = 4)),
              axis.title.y = element_text(size = rel(0.95), margin = margin(r = 4)),
              axis.text = element_text(size=rel(0.85)))
      
      if (metric_plot_loop == "Covariance") {
        log_breaks_plot_subplot <- pretty(LOG_COV_JUMP_FACTORS, n=4)
        actual_breaks_plot_subplot <- exp(log_breaks_plot_subplot)
        actual_labels_plot_subplot <- sapply(actual_breaks_plot_subplot, function(br) if (abs(log(br)) < 1e-6) "1.0" else sprintf("%.1f", br))
        p_current_subplot <- p_current_subplot + scale_x_continuous(breaks = actual_breaks_plot_subplot, labels = actual_labels_plot_subplot)
      } else {
        p_current_subplot <- p_current_subplot + scale_x_continuous(n.breaks = 5)
      }
      
      # Conditional Axis Labels and Text
      # Y-axis: Only for plots in the first column
      if(dgp_plot_loop == dgp_types_to_run[1]) {
        p_current_subplot <- p_current_subplot + labs(y = "Empirical Power")
      } else {
        p_current_subplot <- p_current_subplot + theme(axis.text.y = element_blank(), axis.ticks.y = element_blank(), axis.title.y = element_blank())
      }
      
      # X-axis: For all plots in the last row
      if(metric_plot_loop == metric_spaces_to_run_power[length(metric_spaces_to_run_power)]) {
        p_current_subplot <- p_current_subplot + labs(x = current_x_axis_label_plot)
      } else { # Not the last row, remove x-axis text and title
        p_current_subplot <- p_current_subplot + theme(axis.text.x = element_blank(), axis.ticks.x = element_blank(), axis.title.x = element_blank())
      }
      plot_list_final[[subplot_idx_counter]] <- p_current_subplot
    }
  }
  
  if (length(plot_list_final) == (length(metric_spaces_to_run_power) * length(dgp_types_to_run))) {
    combined_figure_patch <- (plot_list_final[[1]] | plot_list_final[[2]]) /
      (plot_list_final[[3]] | plot_list_final[[4]]) /
      (plot_list_final[[5]] | plot_list_final[[6]])
    
    final_figure_with_legend <- combined_figure_patch +
      plot_layout(guides = "collect") +
      plot_annotation(caption = paste0("N = ", SAMPLE_SIZE_POWER_CURVE, ", Test Level \u03B1 = ", ALPHA_LEVEL,
                                       ". Results based on ", N_SIMULATIONS_POWER_CURVE, " Monte Carlo simulations per point.")) &
      theme(legend.position = "bottom",
            legend.box.margin = margin(t = 10, b = 5), # Add space around legend box
            legend.title = element_text(face="bold", size=rel(0.9)),
            legend.text = element_text(size=rel(0.85)),
            plot.caption = element_text(hjust = 0.5, size = rel(0.85), margin = margin(t=15, b=5))) # Add top margin to caption
    
    print(final_figure_with_legend)
    # Create figs/powercurves directory if it doesn't exist
    figs_dir_path <- "figs/powercurves"
    if (!dir.exists(figs_dir_path)) {
      dir.create(figs_dir_path, recursive = TRUE)
      cat(paste("Created directory:", figs_dir_path, "\n"))
    }
    combined_plot_filename_final <- paste0("power_curves_stacked_N", SAMPLE_SIZE_POWER_CURVE, ".png")
    ggsave(file.path(figs_dir_path, combined_plot_filename_final), plot = final_figure_with_legend, width = 7.5, height = 9, dpi = 300) # Adjusted size
    cat(paste0("Combined stacked power curve plot saved to ", file.path(figs_dir_path, combined_plot_filename_final), "\n"))
    
  } else {
    cat("Incorrect number of plots generated for stacking. Expected ",
        length(metric_spaces_to_run_power) * length(dgp_types_to_run),
        ", got", length(plot_list_final), ".\n")
  }
  
} else {
  cat("\nPackages ggplot2, tidyr, and patchwork not found. Skipping combined power curve plot.\n")
  cat("\n--- All Power Curve Results Table ---\n")
  print(knitr::kable(all_power_results_df, digits=3, format="pipe",
                     caption=paste("Full Power Comparison Results at N =", SAMPLE_SIZE_POWER_CURVE)))
}