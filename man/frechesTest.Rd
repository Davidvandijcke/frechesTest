% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/frechesTest.R
\name{frechesTest}
\alias{frechesTest}
\title{frechesTest}
\usage{
frechesTest(
  Y_obj,
  X_scalar,
  c_val,
  metric_space_type,
  h_frechet,
  kernel_frechet_char = "epan",
  frechet_optns = list(),
  h_fx = NULL,
  kernel_fx_char = "gauss"
)
}
\arguments{
\item{Y_obj}{A list of observed metric objects. Each element of the list
corresponds to one observation. For `metric_space_type = "density"`,
elements can be raw numeric vectors, histogram objects, or specific
quantile lists (see Details). For `"covariance"` or `"correlation"`,
elements should be matrices. For `"sphere"`, elements should be numeric
unit vectors.}

\item{X_scalar}{A numeric vector of scalar covariates, corresponding to `Y_obj`.}

\item{c_val}{The scalar cutoff point in `X_scalar` where the discontinuity is tested.}

\item{metric_space_type}{A character string specifying the type of metric space.
Supported types: `"density"` (for 1D distributions, uses Wasserstein-2 distance),
`"covariance"` (for SPD matrices), `"correlation"` (for correlation matrices),
`"sphere"` (for unit vectors on a hypersphere).}

\item{h_frechet}{Numeric scalar, the bandwidth for local Frechet regression.}

\item{kernel_frechet_char}{Character string, the kernel function to use for local
Frechet regression weights. See `frechet:::kerFctn` for choices
(e.g., `"gauss"`, `"epan"`, `"rect"`, `"quar"`). Default is `"epan"`.}

\item{frechet_optns}{A list of options specific to the `metric_space_type` for
Frechet mean and distance calculations:
\itemize{
  \item For `"density"`:
    \itemize{
      \item `qSup`: (Required) Numeric vector, the common probability grid (0 to 1) for quantile functions.
      \item `den_opts_for_create_density`: (Optional) List of options for `frechet::CreateDensity`
            (e.g., `kernelDen`, `bwDen`/`userBwMu`). If `NULL`, `CreateDensity` defaults are used.
      \item `lower`, `upper`: (Optional) Scalars for lower/upper bounds of quantile function support
            during projection in Frechet mean estimation.
    }
  \item For `"covariance"` or `"correlation"`:
    \itemize{
      \item `metric`: (Optional) Character, metric for distances (e.g., `"frobenius"`, `"power"`, `"log_cholesky"`, `"cholesky"`).
            Defaults to `"frobenius"`.
      \item `alpha`: (Optional) Numeric, power for the `"power"` metric. Defaults to 1.
    }
  \item For `"sphere"`: (Currently no specific options beyond `h_frechet` and `kernel_frechet_char`).
}}

\item{h_fx}{Numeric scalar, bandwidth for estimating the density of `X_scalar` at `c_val`, \eqn{f_X(c)}.
If `NULL` (default), `stats::bw.nrd0(X_scalar)` is used.}

\item{kernel_fx_char}{Character string, kernel for \eqn{f_X(c)} estimation. Default is `"gauss"`.}
}
\value{
A list containing:
\item{Tn}{The value of the test statistic \eqn{T_n}.}
\item{p_value}{The p-value of the test, based on a Chi-squared distribution with 1 degree of freedom.}
\item{V_hat_plus}{Estimated conditional Frechet variance from the right of `c_val`.}
\item{V_hat_minus}{Estimated conditional Frechet variance from the left of `c_val`.}
\item{V_hat_pooled}{Estimated pooled conditional Frechet variance around `c_val`.}
\item{sigma_V_sq_hat_plus}{Estimated variance of \eqn{d^2(Y, \hat{l}_{+, \oplus})} from the right.}
\item{sigma_V_sq_hat_minus}{Estimated variance of \eqn{d^2(Y, \hat{l}_{-, \oplus})} from the left.}
\item{f_X_hat_c}{Estimated density \eqn{\hat{f}_X(c)}.}
\item{S_K}{The kernel constant \eqn{S_K}.}
\item{F_n}{The component of \eqn{T_n} related to mean differences.}
\item{U_n}{The component of \eqn{T_n} related to variance differences.}
\item{l_hat_plus}{Estimated Frechet mean from the right.}
\item{l_hat_minus}{Estimated Frechet mean from the left.}
\item{l_hat_pooled}{Estimated pooled Frechet mean.}
\item{kernel_constants}{A list of integrated kernel moments used for \eqn{S_K}.}
\item{error}{A string containing an error message if estimation failed, otherwise NULL.}
}
\description{
Test for Jumps in Metric-Space Conditional Frechet Means
}
\details{
Implements the ANOVA-style test for discontinuity in conditional Frechet means
based on the working paper "A Test for Jumps in Metric-Space Conditional Means"
by David Van Dijcke.

The test statistic is constructed as described in Section 4.2 of the paper
"A Test for Jumps in Metric-Space Conditional Means" by David Van Dijcke.
It combines differences in estimated Frechet means (via \eqn{F_n}) and
Frechet variances (via \eqn{U_n}) from both sides of the cutoff `c_val`.

For `metric_space_type = "density"`:
Observations in `Y_obj` can be:
1. Numeric vectors (raw data). `frechet::CreateDensity` will be used.
2. Lists with `q` (quantile values) and `qSup` (support) and `type="quantile"`.
3. Histogram objects (lists with `mids`, `counts`, `breaks`) compatible with `frechet::CreateDensity(histogram=...)`.
`frechet_optns$qSup` is essential for defining the common grid for L2-Wasserstein computations.
}
\examples{
\dontrun{
# --- Example for Density Space (Wasserstein) ---
set.seed(123)
n1 <- 50; n2 <- 50; n_total <- n1 + n2
X_scalar <- c(runif(n1, 0, 0.5-0.01), runif(n2, 0.5+0.01, 1))
Y_obj_density <- vector("list", n_total)
for(i in 1:n_total) {
  if (X_scalar[i] < 0.5) {
    Y_obj_density[[i]] <- rnorm(100, mean = 0, sd = 1)
  } else {
    Y_obj_density[[i]] <- rnorm(100, mean = 0.5, sd = 1) # Jump in mean
  }
}
frechet_options_density <- list(
  qSup = seq(0.01, 0.99, length.out = 51), # Fewer points for faster example
  den_opts_for_create_density = list(kernelDen = "gauss")
)
test_result_density <- FrechetJumpTest(
  Y_obj = Y_obj_density, X_scalar = X_scalar, c_val = 0.5,
  metric_space_type = "density",
  h_frechet = 0.15, kernel_frechet_char = "epan",
  frechet_optns = frechet_options_density,
  h_fx = NULL, kernel_fx_char = "gauss"
)
print(test_result_density)

# --- Example for Covariance Space (Frobenius) ---
if (requireNamespace("MASS", quietly = TRUE)) {
  set.seed(456)
  p_cov <- 3 # Dimension of covariance matrices
  Y_obj_cov <- vector("list", n_total)
  true_mean_cov1 <- diag(p_cov)
  true_mean_cov2 <- diag(p_cov) * 2.0 # Jump in scale
  for(i in 1:n_total) {
    base_cov <- if (X_scalar[i] < 0.5) true_mean_cov1 else true_mean_cov2
    sample_data <- MASS::mvrnorm(30, mu = rep(0, p_cov), Sigma = base_cov)
    Y_obj_cov[[i]] <- stats::cov(sample_data)
  }
  frechet_options_cov <- list(metric = "frobenius")
  test_result_cov <- FrechetJumpTest(
    Y_obj = Y_obj_cov, X_scalar = X_scalar, c_val = 0.5,
    metric_space_type = "covariance",
    h_frechet = 0.15, kernel_frechet_char = "epan",
    frechet_optns = frechet_options_cov
  )
  print(test_result_cov)
}
}
}
